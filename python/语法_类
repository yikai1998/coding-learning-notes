# coding=gbk

# 什么是类
# 类是由属性和方法构成的，python中用__init__的方法，来初始化定义属性。在实例化任何一个对象时，class都会优先对其进行初始化，把所有属性赋予这个角色

class HumanCreation:
    def __init__(self, name, gender):
        self.name = name  # 人都是有名字的
        self.gender = gender  # 人都是有性别的

    # 定义一个吃饭的方法
    def eat(self):
        print(f'{self.name} is having food now.')

    # 定义一个看电视的方法
    def watching_tv(self, channel):
        print(f'{self.name} is watching the {channel} on TV.')

    def go_wc(self):
        if self.gender == 'male':
            print(f'{self.name} is a man, so he should go to the male toilet.')
        if self.gender == 'female':
            print(f'{self.name} is a woman, so she should go to the female toilet.')


person_1 = HumanCreation(name='Ben Chen', gender='male')
print(person_1.name, person_1.gender)
person_1.eat()
person_1.watching_tv(channel='cartoon')
person_1.go_wc()

person_2 = HumanCreation(name='Kitty Li', gender='female')
print(person_2.name, person_2.gender)
person_2.eat()
person_2.watching_tv(channel='news')
person_2.go_wc()

# 一定要有__init__方法吗？ 如果不初始化会怎么样
# class HumanCreation2:
#     # 定义一个吃饭的方法
#     # def eat(self):
#     #     print(f'{self.name} is having food now.')
#     #
#     # # 定义一个看电视的方法
#     # def watching_tv(self, channel):
#     #     print(f'{self.name} is watching the {channel} on TV.')
#     #
#     # def go_wc(self):
#     #     if self.gender == 'male':
#     #         print(f'{self.name} is a man, so he should go to the male toilet.')
#     #     if self.gender == 'female':
#     #         print(f'{self.name} is a woman, so she should go to the female toilet.')

# 执行self.name 或 self.gender会报错，而且在调用func时需要传入过多的参数导致代码冗余
